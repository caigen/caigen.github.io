---
layout: post
title:  "pthread.h"
date:   2014-03-28 17:25:00
categories: jekyll update
---
###Show me a clear demo.

    #include <pthread.h>
    #include <unistd.h>
    #include <assert.h>
    #include <stdio.h>

    pthread_cond_t cond;
    pthread_mutex_t mutex;

    void* start_routine(void* args) {
        printf("args from father: %d\n", *(int*)(args));
        pthread_cond_signal(&cond);

        printf("%d\n", __LINE__);
        return NULL;
    }

    int main(int argc, char* argv[]) {
        pthread_cond_init(&cond, NULL);

        pthread_t new_thread;
        int args = __LINE__;
        pthread_create(&new_thread, NULL, start_routine, &args);

        pthread_cond_wait(&cond, &mutex);
        printf("%d\n", __LINE__);

        /* let the new_thread output. */
        sleep(1);

        return 0;
    }


###What's pthread.h?

The pthread.h file is a C/C++ header file under Linux/Unix. It is used for supporting multiple threads programming. The 'pthread.h' is short for 'POSIX thread header file'.

###Related file
The most important related file of pthread.h is pthreadtypes.h. Many data types about thread are defined in it.

->/usr/include/bits/pthreadtypes.h

    /* Thread identifiers.  The structure of the attribute type is not
       exposed on purpose.  */
    typedef unsigned long int pthread_t;

    /* Data structures for mutex handling.  The structure of the attribute
       type is not exposed on purpose.  */
    typedef union
    {
    ...
    } pthread_mutex_t;

    typedef union
    {
    ...
    } pthread_mutexattr_t;


    /* Data structure for conditional variable handling.  The structure of
       the attribute type is not exposed on purpose.  */
    typedef union
    {
    ...
    } pthread_cond_t;

    typedef union
    {
    ...
    } pthread_condattr_t;


    /* Keys for thread-specific data */
    typedef unsigned int pthread_key_t;


    /* Once-only execution */
    typedef int pthread_once_t;

    /* Data structure for read-write lock variable handling.  The
       structure of the attribute type is not exposed on purpose.  */
    typedef union
    {
    ...
    } pthread_rwlock_t;

    typedef union
    {
    ...
    } pthread_rwlockattr_t;

    /* POSIX spinlock data type.  */
    typedef volatile int pthread_spinlock_t;

    /* POSIX barriers data type.  The structure of the type is
       deliberately not exposed.  */
    typedef union
    {
    ...
    } pthread_barrier_t;

    typedef union
    {
    ...
    } pthread_barrierattr_t;


###The content of pthread.h

->/usr/include/pthread.h

Tips:

1) mutex is short for MUTual EXclusion. NP is short for non-portable.

2) `__THROW` is defined as throw() in C++ and is defined as nothing in C.

3) `__nonnull` is a GCC function attribute. See [GCC function attributes](http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html).


    /* Detach state.  */
    enum { ... };

    /* Mutex types. */
    enum { ... };

    /* Mutex protocols.  */
    enum
    {
      PTHREAD_PRIO_NONE,
      PTHREAD_PRIO_INHERIT,
      PTHREAD_PRIO_PROTECT
    };

    /* Mutex initializers.  */
    #define PTHREAD_MUTEX_INITIALIZER  { ... }

    /* Read-write lock types. */
    enum { ... } ;

    /* Read-write lock initializers.  */
    #define PTHREAD_RWLOCK_INITIALIZER { ... }

    /* Conditional variable handling.  */
    #define PTHREAD_COND_INITIALIZER { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }


    /* Create a new thread, starting with execution of START-ROUTINE
       getting passed ARG.  Creation attributed come from ATTR.  The new
       handle is stored in *NEWTHREAD.  */
    extern int pthread_create (pthread_t *__restrict __newthread,
                   __const pthread_attr_t *__restrict __attr,
                   void *(*__start_routine) (void *),
                   void *__restrict __arg) __THROW __nonnull ((1, 3));


    /* Mutex handling.  */
    /* Initialize a mutex.  */
    extern int pthread_mutex_init (pthread_mutex_t *__mutex,
                       __const pthread_mutexattr_t *__mutexattr)
         __THROW __nonnull ((1));


    /* Functions for handling read-write locks.  */
    /* Initialize read-write lock RWLOCK using attributes ATTR, or use
       the default values if later is NULL.  */
    extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
                    __const pthread_rwlockattr_t *__restrict
                    __attr) __THROW __nonnull ((1));


    /* Functions for handling conditional variables.  */
    /* Initialize condition variable COND using attributes ATTR, or use
       the default values if later is NULL.  */
    extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
                      __const pthread_condattr_t *__restrict
                      __cond_attr) __THROW __nonnull ((1));


    /* Functions to handle spinlocks.  */
    /* Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can
       be shared between different processes.  */
    extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
         __THROW __nonnull ((1));


    /* Functions to handle barriers.  */
    /* Initialize BARRIER with the attributes in ATTR.  The barrier is
       opened when COUNT waiters arrived.  */
    extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
                     __const pthread_barrierattr_t *__restrict
                     __attr, unsigned int __count)
         __THROW __nonnull ((1));


    /* Install handlers to be called when a new process is created with FORK.
       The PREPARE handler is called in the parent process just before performing
       FORK. The PARENT handler is called in the parent process just after FORK.
       The CHILD handler is called in the child process.  Each of the three
       handlers can be NULL, meaning that no handler needs to be called at that
       point.
       PTHREAD_ATFORK can be called several times, in which case the PREPARE
       handlers are called in LIFO order (last added with PTHREAD_ATFORK,
       first called before FORK), and the PARENT and CHILD handlers are called
       in FIFO (first added, first called).  */

    extern int pthread_atfork (void (*__prepare) (void),
                   void (*__parent) (void),
                   void (*__child) (void)) __THROW;

